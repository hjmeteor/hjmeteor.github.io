{"meta":{"title":"Meteor","subtitle":"Meteor-roeteM","description":"Meteor's Blog","author":"Jian Hou","url":"http://www.roetem.com"},"pages":[{"title":"","date":"2017-07-20T21:12:17.552Z","updated":"2017-07-20T21:12:17.552Z","comments":true,"path":"404.html","permalink":"http://www.roetem.com/404.html","excerpt":"","text":""},{"title":"works","date":"2017-07-20T22:00:18.000Z","updated":"2017-07-20T22:00:18.793Z","comments":true,"path":"works/index.html","permalink":"http://www.roetem.com/works/index.html","excerpt":"","text":""},{"title":"about","date":"2017-07-20T21:54:38.000Z","updated":"2017-07-20T21:54:38.320Z","comments":true,"path":"about/index.html","permalink":"http://www.roetem.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World！ 我的Hexo建立博客与配置","slug":"Hello World！ 我的Hexo建立博客与配置","date":"2017-07-20T23:12:05.945Z","updated":"2017-07-20T21:08:36.932Z","comments":true,"path":"2017/07/21/Hello World！ 我的Hexo建立博客与配置/","link":"","permalink":"http://www.roetem.com/2017/07/21/Hello World！ 我的Hexo建立博客与配置/","excerpt":"","text":"前言：最近闲着无聊，搞个博客没事儿吐槽下，自己建站耗时耗力，选择了HEXO来建站，据说生成静态网页的速度比Jekyll快（虽然Jekyll官方推荐，主要是相比于Ruby我觉得我更熟悉Node.js,而且Windows用Ruby很蛋疼）。而且一直很喜欢用Markdown写东西，很带感。下面我就是记录下我的过程没有详细的解释哈哈，因为懒。 一步一步来：1. 获取绑定域名：选择了github student package里的一年免费的namecheap的.me域名，全程无脑操作，自动和Github Page绑定还有DNS解析也自动弄好了弄好了，如下: A Record： 192.30.252.153 A Record： 192.30.252.154 CNAME Record: hjmeteor.github.io. 2. 建立Repo：仓库名应该为：用户名.github.io 3. 安装Node.js：Node.js下载地址：https://nodejs.org/en/download/ 检查Node.js是否安装完成：1$ node -v 4. 安装Hexo：用npm命令安装Hexo，安装时间较长：1$ npm install -g hexo-cli 在本地找个地方初始化博客：123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 检测是否初始化成功：1234$ hexo g ($ hexo generate)hexo s($ hexo server) 5. 推送网站：首先有2个配置文件都叫_config.yml，一个在根目录下，一个在themes文件夹下，所以前者称之为站点配置文件，后者是主题配置文件。如下是配置文件各项说明：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# Site #站点信息title: #标题subtitle: #副标题description: #站点描述，给搜索引擎看的author: #作者email: #电子邮箱language: zh-CN #语言timezone: #时区avatar: #网站头像# URL #链接格式url: #网址root: / #根目录permalink: :year/:month/:day/:title/ #文章的链接格式permalink_defaults:# Directory #目录source_dir: source #源文件目录public_dir: public #生成的网页文件目录tag_dir: tags #标签目录archive_dir: archives #存档目录category_dir: categories #分类目录# Writing #写作new_post_name: :title.md #新文章标题default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）titlecase: false #标题转换成大写external_link: true #在新选项卡中打开连接filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsehighlight: #语法高亮 enable: true #是否启用 line_number: true #显示行号 tab_replace:# Category &amp; Tag #分类和标签default_category: uncategorized #默认分类category_map:tag_map:# Date / Time format #日期时间格式date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/time_format: H:mm:ss# Pagination #分页per_page: 10 #每页文章数，设置成 0 禁用分页pagination_dir: page# Extensions #拓展插件theme: icarus #主题 我用的这个icarusexclude_generator:plugins: #插件，例如生成 RSS 和站点地图的- hexo-generator-feed- hexo-generator-sitemap# Deployment #部署配置deploy: type: git repo: repo的地址 branch: master 将deployment配置好后由于我们使用的是git，所以要有如下命令：1$ npm install hexo-deployer-git --save 所以之后做出修改后我们可以有如下命令：12$ hexo clean $ hexo d -g Hexo常用命令:Hexo npm update hexo-cli -g #升级hexo init#初始化博客 命令简写hexo n “我的博客” == hexo new “我的博客” #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署hexo d -g == hexo generate -&gt; hexo deployhexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令 6. 更换主题：我用的主题是icarus。安装方法参见他的网站。 7. 添加插件：8. 各种小改动： 添加了各种图标 更换了share插件 瞎折腾CSS： 可以看看这个Hexo主题配置与优化（二） 标签云变色： 参考这个标签云100. 注意事项： 将CNAME文件和README.md文件放入source中，否则一次deploy就会让在根目录的他们消失。CNAME中将我们的网址输入。然后在站点_config.yml文件中添加一行： skip_render: README.md 目的是防止README.md被渲染","categories":[],"tags":[{"name":"Hexo, Github, Tutorial, Setting","slug":"Hexo-Github-Tutorial-Setting","permalink":"http://www.roetem.com/tags/Hexo-Github-Tutorial-Setting/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-07-20T23:07:08.244Z","updated":"2017-07-20T23:07:08.244Z","comments":true,"path":"2017/07/21/hello-world/","link":"","permalink":"http://www.roetem.com/2017/07/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"苏格兰高地风光","slug":"苏格兰高地风光","date":"2017-07-20T20:48:04.000Z","updated":"2017-07-20T21:44:14.508Z","comments":true,"path":"2017/07/20/苏格兰高地风光/","link":"","permalink":"http://www.roetem.com/2017/07/20/苏格兰高地风光/","excerpt":"","text":"","categories":[],"tags":[{"name":"Photography, Scotland, Highland, Mountain, River, Galaxy, Starry Sky, Night Sky, Landscape","slug":"Photography-Scotland-Highland-Mountain-River-Galaxy-Starry-Sky-Night-Sky-Landscape","permalink":"http://www.roetem.com/tags/Photography-Scotland-Highland-Mountain-River-Galaxy-Starry-Sky-Night-Sky-Landscape/"}]},{"title":"Hexo原始文件和生成的静态网页共存同一rep方法","slug":"Hexo原始文件和生成的静态网页共存同一rep方法","date":"2017-07-20T16:07:39.000Z","updated":"2017-07-20T22:45:51.632Z","comments":true,"path":"2017/07/20/Hexo原始文件和生成的静态网页共存同一rep方法/","link":"","permalink":"http://www.roetem.com/2017/07/20/Hexo原始文件和生成的静态网页共存同一rep方法/","excerpt":"作者：CrazyMilk链接：https://www.zhihu.com/question/21193762/answer/79109280来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","text":"作者：CrazyMilk链接：https://www.zhihu.com/question/21193762/answer/79109280来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 其实，Hexo生成的文件里面是有一个.gitignore的，所以它的本意应该也是想我们把这些文件放到GitHub上存放的。但是考虑到如果每个GitHub Pages都需要额外的一个仓库存放这些文件，就显得特别冗余了。这个时候就可以用分支的思路！一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。最近我也用GitHub Pages搭建了一个独立博客，想到了这个方法，使用之后真的特别简洁。为了更直观地说明，奉上使用这种方法不同时候的流程： 一、关于搭建的流程 创建仓库，http://CrazyMilk.github.io； 创建两个分支：master 与 hexo； 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）； 使用命令拷贝仓库； 在本地文件夹下依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）; 修改_config.yml中的deploy参数，分支应为master； 依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件； 执行hexo g -d生成网站并部署到GitHub上。 这样一来，在GitHub上的http://CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！ 二、关于日常的改动流程在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。 依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）； 然后才执行hexo g -d发布网站到master分支上。 虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。 三、本地资料丢失后的流程当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤： 使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库（默认分支为hexo）； 在本地新拷贝的http://CrazyMilk.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。","categories":[],"tags":[{"name":"Hexo, Github, Tutorial, Setting","slug":"Hexo-Github-Tutorial-Setting","permalink":"http://www.roetem.com/tags/Hexo-Github-Tutorial-Setting/"}]}]}